// Code generated by MockGen. DO NOT EDIT.
// Source: repository/foo.go

// Package mock is a generated GoMock package.
package mock

import (
	entity "example/web-service-gin/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockFooRepository is a mock of FooRepository interface.
type MockFooRepository struct {
	ctrl     *gomock.Controller
	recorder *MockFooRepositoryMockRecorder
}

// MockFooRepositoryMockRecorder is the mock recorder for MockFooRepository.
type MockFooRepositoryMockRecorder struct {
	mock *MockFooRepository
}

// NewMockFooRepository creates a new mock instance.
func NewMockFooRepository(ctrl *gomock.Controller) *MockFooRepository {
	mock := &MockFooRepository{ctrl: ctrl}
	mock.recorder = &MockFooRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFooRepository) EXPECT() *MockFooRepositoryMockRecorder {
	return m.recorder
}

// FindByID mocks base method.
func (m *MockFooRepository) FindByID(id int64) (*entity.Foo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", id)
	ret0, _ := ret[0].(*entity.Foo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockFooRepositoryMockRecorder) FindByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockFooRepository)(nil).FindByID), id)
}

// Insert mocks base method.
func (m *MockFooRepository) Insert(foo *entity.Foo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", foo)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockFooRepositoryMockRecorder) Insert(foo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockFooRepository)(nil).Insert), foo)
}

// Update mocks base method.
func (m *MockFooRepository) Update(foo *entity.Foo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", foo)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockFooRepositoryMockRecorder) Update(foo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockFooRepository)(nil).Update), foo)
}
